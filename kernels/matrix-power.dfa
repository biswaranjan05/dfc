/*
 * Full matrix-multiply domain flow program kernel
 *
 * All arguments are abstract handles.
 */

kernel<T> gemm (domain<T> a, b, c) {
    index_space (i,j,k);

    // function definitions for localized PE processing
    T scale(T factor, element) {
        return factor * element;
    }
    T mac(T a, b, c) {
        return a*b + c
    }

    // domain of computation
    compute ( 1 <= i,j,k <= N ) {
	    a: scale((T)1, a[i-1,j,k]);
	    b: b[i,j-1,k];
	    c: mac(a[i-1,j,k], b[i,j-1,k], c[i,j,k-1]);
    }
}

int main() {
    dense_matrix<float64> A, A4;
    domain<float64> a,a2,a3, a4;

    // input interfaces define a projection into distributed space
    input ( 0 = i, 1 <= j,k <= N) {
	    a: A[j,k];
    }

    // kernels compute events in a distributed index space
    gemm<float64> (a, a, a2)
    gemm<float64> (a, a2, a3)
    gemm<float64> (a2, a2, a4)

    // output interfaces define a projection back into flat memory
    output ( N = k, 1 <= i <= N, 1 <= j <= N) {
	    A4[j,i] = a4[i,j,k];
    }
}